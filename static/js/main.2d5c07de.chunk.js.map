{"version":3,"sources":["Card.js","serviceWorker.js","CardList.js","SearchBox.js","Scroll.js","Errorboundary.js","App.js","index.js"],"names":["Card","name","email","id","className","alt","src","Boolean","window","location","hostname","match","CardList","robot","cardComponent","map","user","i","key","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Errorboundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gMAiBeA,G,WAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,2DACb,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACpB,6BACE,4BAAKF,GACL,2BAAIC,OCCQK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCASC,EAdE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,EAAgBD,EAAME,KAAI,SAACC,EAAMC,GACrC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLd,GAAIU,EAAMI,GAAGd,GACbF,KAAMY,EAAMI,GAAGhB,KACfC,MAAOW,EAAMI,GAAGf,WAItB,OAAO,6BAAMY,ICDAK,EAZG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKjB,UAAU,OACb,2BACEA,UAAU,mCACVkB,KAAK,SACLC,YAAY,qBACZC,SAAUH,MCOHI,G,MAdA,SAACC,GACd,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,WAGTJ,EAAMK,YCWEC,E,kDAnBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,0DAEFG,KAAKX,MAAMK,a,GAhBMQ,aCiDbC,E,kDAzCb,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAjB1C,EAAKX,MAAQ,CACXpB,MAAO,GACPO,YAAa,IAJH,E,gEAQO,IAAD,OAClByB,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKX,SAAS,CAAEzB,MAAOoC,S,+BAOnB,IAAD,OACDC,EAAgBb,KAAKJ,MAAMpB,MAAMsC,QAAO,SAACtC,GAC7C,OAAOA,EAAMZ,KACVmD,cACAC,SAAS,EAAKpB,MAAMb,YAAYgC,kBAErC,OACE,yBAAKhD,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWiB,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5B,MAAOqC,W,GAlCXX,aCAlBe,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACL6B,QAAQ7B,MAAMA,EAAM8B,a","file":"static/js/main.2d5c07de.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { robot } from \"./robot\";\r\nimport \"tachyons\";\r\nimport index from \"./index\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green boo dib br3 pa3 na2 grow bw2 shadow-5\">\r\n      <img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"tachyons\";\r\n\r\nconst CardList = ({ robot }) => {\r\n  const cardComponent = robot.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robot[i].id}\r\n        name={robot[i].name}\r\n        email={robot[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, SearchChange }) => {\r\n  return (\r\n    <div className=\"pa3\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"Search\"\r\n        placeholder=\"Search Robots Here\"\r\n        onChange={SearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"5px solid black\",\r\n        height: \"1000px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Errorboundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooooops. That is not good</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default Errorboundary;\r\n","import { Component } from \"react\";\r\nimport CardList from \"./CardList\";\r\nimport { robot } from \"./robot\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nimport Scroll from \"./Scroll\";\r\nimport Errorboundary from \"./Errorboundary\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robot: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((users) => {\r\n        this.setState({ robot: users });\r\n      });\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n  render() {\r\n    const filteredRobot = this.state.robot.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox SearchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <Errorboundary>\r\n            <CardList robot={filteredRobot} />\r\n          </Errorboundary>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Card from \"./Card\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { robot } from \"./robot\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}